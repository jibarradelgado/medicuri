//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MedNeg.FacturaService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RespuestaCFDi", Namespace="http://schemas.datacontract.org/2004/07/FacturaService")]
    [System.SerializableAttribute()]
    public partial class RespuestaCFDi : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] DocumentoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MensajeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Documento {
            get {
                return this.DocumentoField;
            }
            set {
                if ((object.ReferenceEquals(this.DocumentoField, value) != true)) {
                    this.DocumentoField = value;
                    this.RaisePropertyChanged("Documento");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mensaje {
            get {
                return this.MensajeField;
            }
            set {
                if ((object.ReferenceEquals(this.MensajeField, value) != true)) {
                    this.MensajeField = value;
                    this.RaisePropertyChanged("Mensaje");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FacturaService.ITimbrado")]
    public interface ITimbrado {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimbrado/Timbrar", ReplyAction="http://tempuri.org/ITimbrado/TimbrarResponse")]
        MedNeg.FacturaService.RespuestaCFDi Timbrar(string Usuario, string Password, byte[] ArchivoXML);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITimbrado/Timbrar", ReplyAction="http://tempuri.org/ITimbrado/TimbrarResponse")]
        System.IAsyncResult BeginTimbrar(string Usuario, string Password, byte[] ArchivoXML, System.AsyncCallback callback, object asyncState);
        
        MedNeg.FacturaService.RespuestaCFDi EndTimbrar(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimbrado/TimbrarTest", ReplyAction="http://tempuri.org/ITimbrado/TimbrarTestResponse")]
        MedNeg.FacturaService.RespuestaCFDi TimbrarTest(string Usuario, string Password, byte[] ArchivoXML);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITimbrado/TimbrarTest", ReplyAction="http://tempuri.org/ITimbrado/TimbrarTestResponse")]
        System.IAsyncResult BeginTimbrarTest(string Usuario, string Password, byte[] ArchivoXML, System.AsyncCallback callback, object asyncState);
        
        MedNeg.FacturaService.RespuestaCFDi EndTimbrarTest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimbrado/PDF", ReplyAction="http://tempuri.org/ITimbrado/PDFResponse")]
        MedNeg.FacturaService.RespuestaCFDi PDF(string Usuario, string Password, byte[] ArchivoXML, byte[] ArchivoACK);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITimbrado/PDF", ReplyAction="http://tempuri.org/ITimbrado/PDFResponse")]
        System.IAsyncResult BeginPDF(string Usuario, string Password, byte[] ArchivoXML, byte[] ArchivoACK, System.AsyncCallback callback, object asyncState);
        
        MedNeg.FacturaService.RespuestaCFDi EndPDF(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimbrado/Cancelar", ReplyAction="http://tempuri.org/ITimbrado/CancelarResponse")]
        MedNeg.FacturaService.RespuestaCFDi Cancelar(string Usuario, string Password, byte[] PFX, string[] UUID, string ContraseñaPFX);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITimbrado/Cancelar", ReplyAction="http://tempuri.org/ITimbrado/CancelarResponse")]
        System.IAsyncResult BeginCancelar(string Usuario, string Password, byte[] PFX, string[] UUID, string ContraseñaPFX, System.AsyncCallback callback, object asyncState);
        
        MedNeg.FacturaService.RespuestaCFDi EndCancelar(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimbrado/CambiarContrasena", ReplyAction="http://tempuri.org/ITimbrado/CambiarContrasenaResponse")]
        MedNeg.FacturaService.RespuestaCFDi CambiarContrasena(string Usuario, string Password, string NuevoPassword);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITimbrado/CambiarContrasena", ReplyAction="http://tempuri.org/ITimbrado/CambiarContrasenaResponse")]
        System.IAsyncResult BeginCambiarContrasena(string Usuario, string Password, string NuevoPassword, System.AsyncCallback callback, object asyncState);
        
        MedNeg.FacturaService.RespuestaCFDi EndCambiarContrasena(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITimbrado/Login", ReplyAction="http://tempuri.org/ITimbrado/LoginResponse")]
        MedNeg.FacturaService.RespuestaCFDi Login(string Usuario, string Password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITimbrado/Login", ReplyAction="http://tempuri.org/ITimbrado/LoginResponse")]
        System.IAsyncResult BeginLogin(string Usuario, string Password, System.AsyncCallback callback, object asyncState);
        
        MedNeg.FacturaService.RespuestaCFDi EndLogin(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITimbradoChannel : MedNeg.FacturaService.ITimbrado, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TimbrarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TimbrarCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MedNeg.FacturaService.RespuestaCFDi Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MedNeg.FacturaService.RespuestaCFDi)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TimbrarTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TimbrarTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MedNeg.FacturaService.RespuestaCFDi Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MedNeg.FacturaService.RespuestaCFDi)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PDFCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PDFCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MedNeg.FacturaService.RespuestaCFDi Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MedNeg.FacturaService.RespuestaCFDi)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CancelarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CancelarCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MedNeg.FacturaService.RespuestaCFDi Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MedNeg.FacturaService.RespuestaCFDi)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CambiarContrasenaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CambiarContrasenaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MedNeg.FacturaService.RespuestaCFDi Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MedNeg.FacturaService.RespuestaCFDi)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MedNeg.FacturaService.RespuestaCFDi Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MedNeg.FacturaService.RespuestaCFDi)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TimbradoClient : System.ServiceModel.ClientBase<MedNeg.FacturaService.ITimbrado>, MedNeg.FacturaService.ITimbrado {
        
        private BeginOperationDelegate onBeginTimbrarDelegate;
        
        private EndOperationDelegate onEndTimbrarDelegate;
        
        private System.Threading.SendOrPostCallback onTimbrarCompletedDelegate;
        
        private BeginOperationDelegate onBeginTimbrarTestDelegate;
        
        private EndOperationDelegate onEndTimbrarTestDelegate;
        
        private System.Threading.SendOrPostCallback onTimbrarTestCompletedDelegate;
        
        private BeginOperationDelegate onBeginPDFDelegate;
        
        private EndOperationDelegate onEndPDFDelegate;
        
        private System.Threading.SendOrPostCallback onPDFCompletedDelegate;
        
        private BeginOperationDelegate onBeginCancelarDelegate;
        
        private EndOperationDelegate onEndCancelarDelegate;
        
        private System.Threading.SendOrPostCallback onCancelarCompletedDelegate;
        
        private BeginOperationDelegate onBeginCambiarContrasenaDelegate;
        
        private EndOperationDelegate onEndCambiarContrasenaDelegate;
        
        private System.Threading.SendOrPostCallback onCambiarContrasenaCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoginDelegate;
        
        private EndOperationDelegate onEndLoginDelegate;
        
        private System.Threading.SendOrPostCallback onLoginCompletedDelegate;
        
        public TimbradoClient() {
        }
        
        public TimbradoClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TimbradoClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TimbradoClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TimbradoClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<TimbrarCompletedEventArgs> TimbrarCompleted;
        
        public event System.EventHandler<TimbrarTestCompletedEventArgs> TimbrarTestCompleted;
        
        public event System.EventHandler<PDFCompletedEventArgs> PDFCompleted;
        
        public event System.EventHandler<CancelarCompletedEventArgs> CancelarCompleted;
        
        public event System.EventHandler<CambiarContrasenaCompletedEventArgs> CambiarContrasenaCompleted;
        
        public event System.EventHandler<LoginCompletedEventArgs> LoginCompleted;
        
        public MedNeg.FacturaService.RespuestaCFDi Timbrar(string Usuario, string Password, byte[] ArchivoXML) {
            return base.Channel.Timbrar(Usuario, Password, ArchivoXML);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTimbrar(string Usuario, string Password, byte[] ArchivoXML, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTimbrar(Usuario, Password, ArchivoXML, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MedNeg.FacturaService.RespuestaCFDi EndTimbrar(System.IAsyncResult result) {
            return base.Channel.EndTimbrar(result);
        }
        
        private System.IAsyncResult OnBeginTimbrar(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Usuario = ((string)(inValues[0]));
            string Password = ((string)(inValues[1]));
            byte[] ArchivoXML = ((byte[])(inValues[2]));
            return this.BeginTimbrar(Usuario, Password, ArchivoXML, callback, asyncState);
        }
        
        private object[] OnEndTimbrar(System.IAsyncResult result) {
            MedNeg.FacturaService.RespuestaCFDi retVal = this.EndTimbrar(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTimbrarCompleted(object state) {
            if ((this.TimbrarCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TimbrarCompleted(this, new TimbrarCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TimbrarAsync(string Usuario, string Password, byte[] ArchivoXML) {
            this.TimbrarAsync(Usuario, Password, ArchivoXML, null);
        }
        
        public void TimbrarAsync(string Usuario, string Password, byte[] ArchivoXML, object userState) {
            if ((this.onBeginTimbrarDelegate == null)) {
                this.onBeginTimbrarDelegate = new BeginOperationDelegate(this.OnBeginTimbrar);
            }
            if ((this.onEndTimbrarDelegate == null)) {
                this.onEndTimbrarDelegate = new EndOperationDelegate(this.OnEndTimbrar);
            }
            if ((this.onTimbrarCompletedDelegate == null)) {
                this.onTimbrarCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTimbrarCompleted);
            }
            base.InvokeAsync(this.onBeginTimbrarDelegate, new object[] {
                        Usuario,
                        Password,
                        ArchivoXML}, this.onEndTimbrarDelegate, this.onTimbrarCompletedDelegate, userState);
        }
        
        public MedNeg.FacturaService.RespuestaCFDi TimbrarTest(string Usuario, string Password, byte[] ArchivoXML) {
            return base.Channel.TimbrarTest(Usuario, Password, ArchivoXML);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTimbrarTest(string Usuario, string Password, byte[] ArchivoXML, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTimbrarTest(Usuario, Password, ArchivoXML, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MedNeg.FacturaService.RespuestaCFDi EndTimbrarTest(System.IAsyncResult result) {
            return base.Channel.EndTimbrarTest(result);
        }
        
        private System.IAsyncResult OnBeginTimbrarTest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Usuario = ((string)(inValues[0]));
            string Password = ((string)(inValues[1]));
            byte[] ArchivoXML = ((byte[])(inValues[2]));
            return this.BeginTimbrarTest(Usuario, Password, ArchivoXML, callback, asyncState);
        }
        
        private object[] OnEndTimbrarTest(System.IAsyncResult result) {
            MedNeg.FacturaService.RespuestaCFDi retVal = this.EndTimbrarTest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTimbrarTestCompleted(object state) {
            if ((this.TimbrarTestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TimbrarTestCompleted(this, new TimbrarTestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TimbrarTestAsync(string Usuario, string Password, byte[] ArchivoXML) {
            this.TimbrarTestAsync(Usuario, Password, ArchivoXML, null);
        }
        
        public void TimbrarTestAsync(string Usuario, string Password, byte[] ArchivoXML, object userState) {
            if ((this.onBeginTimbrarTestDelegate == null)) {
                this.onBeginTimbrarTestDelegate = new BeginOperationDelegate(this.OnBeginTimbrarTest);
            }
            if ((this.onEndTimbrarTestDelegate == null)) {
                this.onEndTimbrarTestDelegate = new EndOperationDelegate(this.OnEndTimbrarTest);
            }
            if ((this.onTimbrarTestCompletedDelegate == null)) {
                this.onTimbrarTestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTimbrarTestCompleted);
            }
            base.InvokeAsync(this.onBeginTimbrarTestDelegate, new object[] {
                        Usuario,
                        Password,
                        ArchivoXML}, this.onEndTimbrarTestDelegate, this.onTimbrarTestCompletedDelegate, userState);
        }
        
        public MedNeg.FacturaService.RespuestaCFDi PDF(string Usuario, string Password, byte[] ArchivoXML, byte[] ArchivoACK) {
            return base.Channel.PDF(Usuario, Password, ArchivoXML, ArchivoACK);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPDF(string Usuario, string Password, byte[] ArchivoXML, byte[] ArchivoACK, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPDF(Usuario, Password, ArchivoXML, ArchivoACK, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MedNeg.FacturaService.RespuestaCFDi EndPDF(System.IAsyncResult result) {
            return base.Channel.EndPDF(result);
        }
        
        private System.IAsyncResult OnBeginPDF(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Usuario = ((string)(inValues[0]));
            string Password = ((string)(inValues[1]));
            byte[] ArchivoXML = ((byte[])(inValues[2]));
            byte[] ArchivoACK = ((byte[])(inValues[3]));
            return this.BeginPDF(Usuario, Password, ArchivoXML, ArchivoACK, callback, asyncState);
        }
        
        private object[] OnEndPDF(System.IAsyncResult result) {
            MedNeg.FacturaService.RespuestaCFDi retVal = this.EndPDF(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPDFCompleted(object state) {
            if ((this.PDFCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PDFCompleted(this, new PDFCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PDFAsync(string Usuario, string Password, byte[] ArchivoXML, byte[] ArchivoACK) {
            this.PDFAsync(Usuario, Password, ArchivoXML, ArchivoACK, null);
        }
        
        public void PDFAsync(string Usuario, string Password, byte[] ArchivoXML, byte[] ArchivoACK, object userState) {
            if ((this.onBeginPDFDelegate == null)) {
                this.onBeginPDFDelegate = new BeginOperationDelegate(this.OnBeginPDF);
            }
            if ((this.onEndPDFDelegate == null)) {
                this.onEndPDFDelegate = new EndOperationDelegate(this.OnEndPDF);
            }
            if ((this.onPDFCompletedDelegate == null)) {
                this.onPDFCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPDFCompleted);
            }
            base.InvokeAsync(this.onBeginPDFDelegate, new object[] {
                        Usuario,
                        Password,
                        ArchivoXML,
                        ArchivoACK}, this.onEndPDFDelegate, this.onPDFCompletedDelegate, userState);
        }
        
        public MedNeg.FacturaService.RespuestaCFDi Cancelar(string Usuario, string Password, byte[] PFX, string[] UUID, string ContraseñaPFX) {
            return base.Channel.Cancelar(Usuario, Password, PFX, UUID, ContraseñaPFX);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCancelar(string Usuario, string Password, byte[] PFX, string[] UUID, string ContraseñaPFX, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCancelar(Usuario, Password, PFX, UUID, ContraseñaPFX, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MedNeg.FacturaService.RespuestaCFDi EndCancelar(System.IAsyncResult result) {
            return base.Channel.EndCancelar(result);
        }
        
        private System.IAsyncResult OnBeginCancelar(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Usuario = ((string)(inValues[0]));
            string Password = ((string)(inValues[1]));
            byte[] PFX = ((byte[])(inValues[2]));
            string[] UUID = ((string[])(inValues[3]));
            string ContraseñaPFX = ((string)(inValues[4]));
            return this.BeginCancelar(Usuario, Password, PFX, UUID, ContraseñaPFX, callback, asyncState);
        }
        
        private object[] OnEndCancelar(System.IAsyncResult result) {
            MedNeg.FacturaService.RespuestaCFDi retVal = this.EndCancelar(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCancelarCompleted(object state) {
            if ((this.CancelarCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CancelarCompleted(this, new CancelarCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CancelarAsync(string Usuario, string Password, byte[] PFX, string[] UUID, string ContraseñaPFX) {
            this.CancelarAsync(Usuario, Password, PFX, UUID, ContraseñaPFX, null);
        }
        
        public void CancelarAsync(string Usuario, string Password, byte[] PFX, string[] UUID, string ContraseñaPFX, object userState) {
            if ((this.onBeginCancelarDelegate == null)) {
                this.onBeginCancelarDelegate = new BeginOperationDelegate(this.OnBeginCancelar);
            }
            if ((this.onEndCancelarDelegate == null)) {
                this.onEndCancelarDelegate = new EndOperationDelegate(this.OnEndCancelar);
            }
            if ((this.onCancelarCompletedDelegate == null)) {
                this.onCancelarCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCancelarCompleted);
            }
            base.InvokeAsync(this.onBeginCancelarDelegate, new object[] {
                        Usuario,
                        Password,
                        PFX,
                        UUID,
                        ContraseñaPFX}, this.onEndCancelarDelegate, this.onCancelarCompletedDelegate, userState);
        }
        
        public MedNeg.FacturaService.RespuestaCFDi CambiarContrasena(string Usuario, string Password, string NuevoPassword) {
            return base.Channel.CambiarContrasena(Usuario, Password, NuevoPassword);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCambiarContrasena(string Usuario, string Password, string NuevoPassword, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCambiarContrasena(Usuario, Password, NuevoPassword, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MedNeg.FacturaService.RespuestaCFDi EndCambiarContrasena(System.IAsyncResult result) {
            return base.Channel.EndCambiarContrasena(result);
        }
        
        private System.IAsyncResult OnBeginCambiarContrasena(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Usuario = ((string)(inValues[0]));
            string Password = ((string)(inValues[1]));
            string NuevoPassword = ((string)(inValues[2]));
            return this.BeginCambiarContrasena(Usuario, Password, NuevoPassword, callback, asyncState);
        }
        
        private object[] OnEndCambiarContrasena(System.IAsyncResult result) {
            MedNeg.FacturaService.RespuestaCFDi retVal = this.EndCambiarContrasena(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCambiarContrasenaCompleted(object state) {
            if ((this.CambiarContrasenaCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CambiarContrasenaCompleted(this, new CambiarContrasenaCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CambiarContrasenaAsync(string Usuario, string Password, string NuevoPassword) {
            this.CambiarContrasenaAsync(Usuario, Password, NuevoPassword, null);
        }
        
        public void CambiarContrasenaAsync(string Usuario, string Password, string NuevoPassword, object userState) {
            if ((this.onBeginCambiarContrasenaDelegate == null)) {
                this.onBeginCambiarContrasenaDelegate = new BeginOperationDelegate(this.OnBeginCambiarContrasena);
            }
            if ((this.onEndCambiarContrasenaDelegate == null)) {
                this.onEndCambiarContrasenaDelegate = new EndOperationDelegate(this.OnEndCambiarContrasena);
            }
            if ((this.onCambiarContrasenaCompletedDelegate == null)) {
                this.onCambiarContrasenaCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCambiarContrasenaCompleted);
            }
            base.InvokeAsync(this.onBeginCambiarContrasenaDelegate, new object[] {
                        Usuario,
                        Password,
                        NuevoPassword}, this.onEndCambiarContrasenaDelegate, this.onCambiarContrasenaCompletedDelegate, userState);
        }
        
        public MedNeg.FacturaService.RespuestaCFDi Login(string Usuario, string Password) {
            return base.Channel.Login(Usuario, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLogin(string Usuario, string Password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogin(Usuario, Password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MedNeg.FacturaService.RespuestaCFDi EndLogin(System.IAsyncResult result) {
            return base.Channel.EndLogin(result);
        }
        
        private System.IAsyncResult OnBeginLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Usuario = ((string)(inValues[0]));
            string Password = ((string)(inValues[1]));
            return this.BeginLogin(Usuario, Password, callback, asyncState);
        }
        
        private object[] OnEndLogin(System.IAsyncResult result) {
            MedNeg.FacturaService.RespuestaCFDi retVal = this.EndLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoginCompleted(object state) {
            if ((this.LoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginCompleted(this, new LoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginAsync(string Usuario, string Password) {
            this.LoginAsync(Usuario, Password, null);
        }
        
        public void LoginAsync(string Usuario, string Password, object userState) {
            if ((this.onBeginLoginDelegate == null)) {
                this.onBeginLoginDelegate = new BeginOperationDelegate(this.OnBeginLogin);
            }
            if ((this.onEndLoginDelegate == null)) {
                this.onEndLoginDelegate = new EndOperationDelegate(this.OnEndLogin);
            }
            if ((this.onLoginCompletedDelegate == null)) {
                this.onLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            base.InvokeAsync(this.onBeginLoginDelegate, new object[] {
                        Usuario,
                        Password}, this.onEndLoginDelegate, this.onLoginCompletedDelegate, userState);
        }
    }
}
